[
{
	"uri": "/",
	"title": "Build a Membership Website with Amplify, Stripe, and Next.js",
	"tags": [],
	"description": "",
	"content": "Overview Build a Membership Website with Amplify, Stripe, and Next.js What you will learn\nBy the end of this lab, you will learn how to use AWS Amplify to solve real world problems by building a functioning website.\nWhat you will build\nYou will be able to build a membership website with authentication and Stripe integration once you finish this lab.\nPrerequisites\nThe following are required to follow along in this lab:\nBasic knowledge of JavaScript and React.js. Node.js is installed on our computer. Fair understanding of Next.js but not required. AWS Amplify account; create one here. Figma account; create a free account here. Stripe account; create one here. If you want to more entry level course to Amplify, (Not required for this lab) "
},
{
	"uri": "/1-introduce/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "Build a Membership Website with Amplify, Stripe, and Next.js Contents\nIntroduce\nCreate a Copy of the Design Project\nCreate an Amplify Project\nSetup a Next.js Project\nPull Components from Amplify\nBind Data to the Components\nBuild the Website Pages\nCreate a Checkout Flow\nCreate User Accounts\nAuthenticate the Customers\nConclusion\n"
},
{
	"uri": "/2-create-a-copy-of-the-design-project/",
	"title": "Create a Copy of the Design Project",
	"tags": [],
	"description": "",
	"content": "Objectives In this lab, you will learn how to:\nKick off a design project using the Amplify template Theme the design to your taste Creating the Project Design\nWe need to make a copy of this design file to get started. The design was created by cloning the official AWS Amplify UI template and adding a different theme.\nWe can see the design was created, you can zoom to show clearly :\nEven though we’ll use the customized design file for this project, let’s also see how to use the official UI library for future projects.\n1.So, in the Figma community, search for AWS Amplify UI Kit and open the kit maintained by the AWS Amplify Team.\n2.Choose figma name AWS Amplify UI Kit of AWS Amplify.\n3.Click the Get a copy button to create a copy of the AWS Amplify UI project into our Figma account.\nThe AWS Amplify project contains the following pages:\nA readme: describes the UI project.\nPrimitives: like buttons and form controls that make up the component.\nMy Components: these are reusable components composed of primitives that we can drop on our website.\nExamples: this page shows how to use the components.\nEditing the Project design theme\nWe can change the default theme of the official UI template; to do that, we need to install the AWS Amplify theme editor from the Figma community page.\n1.Let\u0026rsquo;s search Amplify themefor the AWS Amplify and open it, click the plugin tab and click try it out it.\n2.Click Primitives and Press the command + / keyboard keys to bring up the Figma command palette back to the Figma project.\n3.Let\u0026rsquo;s click Component for the AWS theme editor and open it, navigate to the components tab and search for button.primary. And set up the color (you can choose like picture). Then click Save.\n4.When save, we should see that we updated the color of the button on the primitives\u0026rsquo; page.\nNote\nAmplify recommends that we don\u0026rsquo;t change the primitives directly; the components\u0026rsquo; artboards are locked to prevent accidentally changing the Components.\nThe primitives have a one-to-one mapping with the AWS Amplify React UI library, which we\u0026rsquo;ll use when pulling the component into our react project. Changing the primitives will make it fall out of sync with the React UI library.\nAmplify will always give us an object containing the themes we are using. We can then pass it to the React UI library to customize it.\nOn the components page, you should see that all button colors have been updated accordingly, the same thing on the example page\nThe Design We\u0026rsquo;ll Use\nInstead of Official Amplify UI Kit in this project, we\u0026rsquo;ll use an already customized one that suits our membership website. The following is what was edited:\nOn the Primitives page - the button color was changed to orange and the background color to dark blue, etc. The Components page - utilizes the customized theme and creates the following components: The Hero component.\nThe testimony component.\nThe story component\nThe Nav Component and the Footer component.\nOn the Examples page - a complete website was built using the components. The website includes a landing page and a paywall-protected page. What\u0026rsquo;s Next?\nIn the next lesson, you will learn how to setup an Amplify project.\n"
},
{
	"uri": "/3-create-an-amplify-project/",
	"title": "Create an Amplify Project",
	"tags": [],
	"description": "",
	"content": "Objectives In this lab, you will learn how to:\nCreate an Amplify project\nSetup authentication\nAdd data model\nGenerate fake data for your model\nImport the components from Figma\nCreating an Amplify Project\nLog in to the AWS console, or create an account here. Search for AWS Amplify from the search bar and select it from the list of services.\nClick Get Start\nNext, click on the Get Start in item Build an app.\nGive a name membership-website to the application and click the Confirm deployment button.\nWait to setting up\nAfter the deployment process, click on the Launch studio button to launch a staging studio in a new tab.\nIn the Amplify studio, we\u0026rsquo;ll add authentication to the project, model a database and deploy it, add contents to the database, and import UI components from Figma using the UI builder.\nAdding Authentication\nNavigate to the authentication tab since we need only signed-in users to access our content. The login mechanism stays the same; then, in configuring the sign-up section, click the password protection setting and make the password as strong or weak as possible.\nUncheck all other checkboxes except the Include lowercase characters checkbox and click Deploy to deploy the authentication.\nNext click in Confirm deployment\nThis deployment can take a few minutes\nIf successfully it will show\nCreating Data Model\nNavigate to the data section and create the following data models: Testimonial - this will have the id, name, avatar, and testimony fields.\nPost - this will have the id, title, body, and description fields and also a readTime field with the type of integer.\nAfter creating the models and adding fields click the Save and Deploy button to deploy the database.\nAdding Content to the Data Model\nAdd this page we will see\nNavigate to the content section, select either the Testimonial or the Post table from the select table dropdown, and click on Auto-generate seed data.\nFor the Testimonial table, set rows to 6, add constraints like in the below and click the Generate data button:\nAfter generating the data, we can then update the avatar fields with desired avatar URLs.\nSet the rows to 10 for the Post table, add constraints, and click the Generate data button to seed the table.\nImporting UI Components from Figma\nWe\u0026rsquo;ll import the customized design from Figma into Amplify Studio, grab the URL from Figma, and navigate the UI Library tab.\nNext, click the Get Started button and paste the Figma design URL in the input field and click on Continue.\nAfter successfully importing the Figma components, click on Accept all changes.\nNext, click on Accept all to accept all the imported components.\nNow, we have all the components in the Amplify project the same way they are in Figma.\nWhat\u0026rsquo;s Next?\nIn the next lesson, we\u0026rsquo;ll setup a Next.js project.\n"
},
{
	"uri": "/4-setup-a-next.js-project/",
	"title": "Setup a Next.js Project",
	"tags": [],
	"description": "",
	"content": "Objectives In this lab, you will learn how to:\nSetup a Next.js project Setting Up a Next.js Application\nTo create a new Next.js application, let\u0026rsquo;s run the following commands in our terminal:\nnpx create-next-app membership-website After creating the application, we\u0026rsquo;ll navigate into the project directory with the command below:\ncd membership-website Next, install the following dependencies:\naws-amplify - to give us access to the amplify SDK\n@aws-amplify/ui-react - this dependency has a one-to-one mapping with the primitive\u0026rsquo;s page in our Figma UI design.\n@fontsource/inter - so we can tweak the fonts of our project.\nThe command below will install the above dependencies:\nnpm install aws-amplify @aws-amplify/ui-react @fontsource/inter A few final steps:\nCreate a reset.css file inside the styles folder in the root directory. Copy the globals.css properties and paste it inside the reset.css file. Delete the styles in the globals.css and add a background color of #091B2A to the body. What\u0026rsquo;s Next?\nIn the next lesson, pull all the UI components and data model from Figma into the new Next.js project.\n"
},
{
	"uri": "/5-pull-components-from-amplify/",
	"title": "Pull Components from Amplify",
	"tags": [],
	"description": "",
	"content": "Objectives In this lab, you will learn how to:\nPull components and model from Amplify\nTest the components\nPulling Components from AWS Amplify\nTo pull Amplify components down to the Next.js application, we should have the AWS Command Line Interface installed in the local machine and authorized.\nInstall the AWS CLI with the following command:\nnpm install -g @aws-amplify/cli Click on Local setup instructions, copy the pull command and run it in the terminal in the Studio.\nNext, authorize the Amplify CLI and follow the prompts below to pull the components, the data models, the authentication and other Amplify settings.\nAWS will add the following folders to the Next.js application.\nvscode - this houses some AWS to VSCode configurations\namplify - this contains AWS backend configurations.\nmodels - this houses the model schemas\nui-components - this is the most important for our project. It includes all of our Figma designs/components.\nNext, we\u0026rsquo;ll import Amplify configurations and wrap the Next.js application with it. To do this, update the _app.js file with the following snippets:\nimport \u0026#34;../styles/globals.css\u0026#34;; import { Amplify } from \u0026#34;aws-amplify\u0026#34;; import { studioTheme } from \u0026#34;../ui-components\u0026#34;; import { AmplifyProvider } from \u0026#34;@aws-amplify/ui-react\u0026#34;; import \u0026#34;@aws-amplify/ui-react/styles.css\u0026#34;; import \u0026#34;@fontsource/inter\u0026#34;; import \u0026#34;../styles/reset.css\u0026#34;; import awsconfig from \u0026#34;../aws-exports\u0026#34;; Amplify.configure(awsconfig); function MyApp({ Component, pageProps }) { return ( \u0026lt;AmplifyProvider theme={studioTheme}\u0026gt; \u0026lt;Component {...pageProps} /\u0026gt; \u0026lt;/AmplifyProvider\u0026gt; ); } export default MyApp; In the snippets above, we did the following:\nImported Amplify from aws-amplify, studioTheme from ui-components, and AmplifyProvider from @aws-amplify/ui-react.\nImported awsconfig from \u0026ldquo;../aws-exports\u0026rdquo; and used it to configure Amplify.\nWrapped the Components with the AmplifyProvider and passed the studioTheme as the theme prop.\nWe\u0026rsquo;ve successfully connected the AWS backend environment with our Next.js application. To test things out, let\u0026rsquo;s import a component from the ui-components folder in the index.js file like in the below:\nimport React from \u0026#34;react\u0026#34;; import { Hero } from \u0026#34;../ui-components\u0026#34;; import { View } from \u0026#34;@aws-amplify/ui-react\u0026#34;; function index() { return ( \u0026lt;View\u0026gt; \u0026lt;Hero /\u0026gt; \u0026lt;/View\u0026gt; ); } export default index; Here, we imported the Hero component and View, like a wrapper div that wraps elements.\nNext, run the following command to start the development server:\nnpm run dev #to start the dev server Next.js will start a development environment at http://localhost:3000 in the browser; our application would look just like expected:\nWhat\u0026rsquo;s Next?\nIn the next lesson, you\u0026rsquo;ll learn how to bind data to the components.\n"
},
{
	"uri": "/6-bind-data-to-the-components/",
	"title": "Bind Data to the Components",
	"tags": [],
	"description": "",
	"content": "Objectives In this lab, you will learn how to:\nBind data to the components\nBind events to the components\nBinding data to Components\nTo breathe life into the components, we\u0026rsquo;ll be binding data and events to them in the Amplify Studio. We\u0026rsquo;ll start with the Nav component.\nClick on the UI Library tab, click on the Nav and click on configure button to bind data and events to the Nav component.\nNext, in configure dialog, click on the component\u0026rsquo;s root (Nav) and click Add prop. We\u0026rsquo;ll create the following top-level props and consume them in the elements with the Nav component.\nusername: this prop will receive the user names on the website.\nauthText: this prop will display the sign-in or sign-out buttons depending on the user authorization.\navatar: this will handle the user avatar.\nhandleAuth: this will handle the authorization event.\nIn the Nav component, we want to hide the username if there\u0026rsquo;s no user, so select the user element and click on the Set prop button; beside the child properties.\nSelect a display from the list of props, click on the three vertical dots beside it, click on add conditional and add conditions like in the below:\nFor the avatar text, select it, click on the Set text label button and set the label to the avatar, and for the user name, select it and set its label to the username.\nFor the button, select it, click on Set an onClick action, select the onClick prop and set its value to handleAuth. Also, click on Set prop, select label prop, and set the value to authText.\nFor the Hero component, we\u0026rsquo;ll create a top-level prop handleClick and set its type to an Event handler. Select the Button element and set its onClick prop to the handleClick we created above.\nWe\u0026rsquo;ll create two top-level props for the Persuade component, handleClick, and banner, then set their types to the Event handler and String.\nNext, select the Button element, select the onClick prop and set it to the handleClick we created. Select the Banner element, select the src prop and set it to the banner prop we created.\nFor the Testimony component, we\u0026rsquo;ll bind data a bit differently; unlike the earlier components, we\u0026rsquo;ll be binding data provisioned in our database to the Testimony component.\nClick on the Testimony Component and click on configure, select the Component\u0026rsquo;s root and click on Add prop, Create a top-level prop testimonyModel, and set its type to Testimonial data model. All the elements of the Testimony Component will have access to the rows in the Testimonial table.\nNow, let\u0026rsquo;s set the Testimony Component elements to different rows of the Testimonial data model.\nSelect the image element, click on Set prop, select the src prop and set it to testimonyModel.avatar. Select the Author element, click on Set prop, select the label prop and set it to testimonyModel.name. Select the Testimony text element, click on Set prop, select the label prop and set it to testimonyModel.testimony. Next, click on Create collection to generate cards for the total number of records in the Testimonial data table. Change the display to Grid on the collection page and set the column to three.\nNext, navigate back to UI Library; let\u0026rsquo;s repeat the process for the Story Component just like we did for the Testimony Component.\nNow, select the Story Component, click the configure button, select the Component\u0026rsquo;s root, and click on Add prop. Create a top-level prop postModel and set it to the Post data model.\nTo bind postModel data to the Story Component elements, we\u0026rsquo;ll select:\nBanner element, set its src prop to any static image.(You can choose https://loremflickr.com/320/240?lock=212 this image) Click on Set prop and set the label prop to postModel.title for the title element. Description element and set its text label prop to postModel.description. ReadTime element and set its label prop to postModel.readTime; also, we\u0026rsquo;ll concatenate a string mins read.. Next, click the Create collection button, name the collection Stories. In the collection page, set the display to Grid and the column to 3, then add a padding 10px round the box.\nWhat\u0026rsquo;s Next?\nIn the next lesson, you\u0026rsquo;ll learn how to build the complete website using the components.\n"
},
{
	"uri": "/7-build-the-website-pages/",
	"title": "Build the Website pages",
	"tags": [],
	"description": "",
	"content": "Objectives In this lab, you will learn how to:\nUse the components to build the website\nBuild the Website\nFirst, run the following command to pull the data binding changes we made into the Next.js project.\namplify pull Next, create a components folder; inside it, create a Layout.js file with the following snippets:\n//components/Layout.js\rimport React from \u0026#34;react\u0026#34;;\rimport { View } from \u0026#34;@aws-amplify/ui-react\u0026#34;;\rimport { Nav } from \u0026#34;../ui-components\u0026#34;;\rfunction Layout({ children, authText, handleClick, username }) {\rreturn (\r\u0026lt;View width=\u0026#34;1200px\u0026#34; marginLeft=\u0026#34;auto\u0026#34; marginRight=\u0026#34;auto\u0026#34;\u0026gt;\r\u0026lt;Nav\rmarginTop={\u0026#34;20px\u0026#34;}\rhandleAuth={handleClick}\rauthText={authText}\rusername={username}\ravatar={username.split(\u0026#34;\u0026#34;)[0].toUpperCase()}\r/\u0026gt;\r{children}\r\u0026lt;/View\u0026gt;\r);\r}\rexport default Layout; In the snippets above, we:\nImported View from \u0026ldquo;@aws-amplify/ui-react\u0026rdquo; and Nav from ui-components.\nRendered View as a wrapper div for the Nav component and the children prop.\nRendered the Nav component and passed some layout props to it.\nNext, modify the index.js file like the below:\n//pages/index.js\rimport React from \u0026#34;react\u0026#34;;\rimport { Flex, View } from \u0026#34;@aws-amplify/ui-react\u0026#34;;\rimport { Footer, Hero, Persuade, Testimonies } from \u0026#34;../ui-components\u0026#34;;\rimport Layout from \u0026#34;../components/Layout\u0026#34;;\rfunction index() {\rreturn (\r\u0026lt;Layout handleClick={() =\u0026gt; {}} authText=\u0026#34;Sign Up\u0026#34; username=\u0026#34;none\u0026#34;\u0026gt;\r\u0026lt;View marginBottom=\u0026#34;135px\u0026#34;\u0026gt;\r\u0026lt;Hero handleClick={() =\u0026gt; {}} /\u0026gt;\r\u0026lt;/View\u0026gt;\r\u0026lt;View\u0026gt;\r\u0026lt;Testimonies /\u0026gt;\r\u0026lt;/View\u0026gt;\r\u0026lt;Flex justifyContent={\u0026#34;center\u0026#34;}\u0026gt;\r\u0026lt;Persuade banner=\u0026#34;https://i.imgur.com/MxbD3N4.png\u0026#34; /\u0026gt;\r\u0026lt;/Flex\u0026gt;\r\u0026lt;View marginTop=\u0026#34;50px\u0026#34; marginBottom=\u0026#34;50px\u0026#34;\u0026gt;\r\u0026lt;Footer /\u0026gt;\r\u0026lt;/View\u0026gt;\r\u0026lt;/Layout\u0026gt;\r);\r}\rexport default index; In the snippets above, we:\nImported Flex and View from \u0026ldquo;@aws-amplify/ui-react\u0026rdquo; and Hero, Persuade, Testimonies, and Footer components from ui-components.\nImported Layout.js from the components directory, rendered it and passed handleClick, authText, and username props.\nUsed View and Flex and rendered our components within the Layout.js wrapper component. Notice that the username component is not visible in the Nav. That is because we passed none as to its value.\nNext, let\u0026rsquo;s create a post page where we will render the Stories component; inside the pages directory, create a post.js file with the following snippets:\n//pages/post.js\rimport React from \u0026#34;react\u0026#34;;\rimport { Heading, Text, View } from \u0026#34;@aws-amplify/ui-react\u0026#34;;\rimport Layout from \u0026#34;../components/Layout\u0026#34;;\rimport { Footer, Stories } from \u0026#34;../ui-components\u0026#34;;\rfunction Post() {\rreturn (\r\u0026lt;Layout\rhandleClick={() =\u0026gt; {}}\rauthText=\u0026#34;Sign Out\u0026#34;\rusername={\u0026#34;christian@hotmail.com\u0026#34;.split(\u0026#34;@\u0026#34;)[0]}\r\u0026gt;\r\u0026lt;View marginTop=\u0026#34;50px\u0026#34; marginBottom=\u0026#34;30px\u0026#34;\u0026gt;\r\u0026lt;Heading level={2}\u0026gt;Welcome to our backstage\u0026lt;/Heading\u0026gt;\r\u0026lt;Text marginTop=\u0026#34;20px\u0026#34;\u0026gt;\rDiscover stories,thinking, and expertise from writers on any top{\u0026#34; \u0026#34;}\r\u0026lt;/Text\u0026gt;\r\u0026lt;/View\u0026gt;\r\u0026lt;Stories /\u0026gt;\r\u0026lt;View marginTop=\u0026#34;50px\u0026#34; marginBottom=\u0026#34;50px\u0026#34;\u0026gt;\r\u0026lt;Footer /\u0026gt;\r\u0026lt;/View\u0026gt;\r\u0026lt;/Layout\u0026gt;\r);\r}\rexport default Post; In the snippets above, we did the following:\nImported Heading and Text components to format our texts and View component to wrap the Text and other components.\nImported the Layout.js components, rendered them, and implemented the post page inside it.\nIf we navigate to /post in the browser, we would see our post page with the stories component in it. To navigate to the post page from the landing page, let\u0026rsquo;s update the index.js with the below snippets:\n//pages/index.js\r//other imports here\rimport { useRouter } from \u0026#34;next/router\u0026#34;;\rfunction index() {\rconst router = useRouter();\rreturn (\r\u0026lt;Layout\rhandleClick={() =\u0026gt; {\rrouter.push(\u0026#34;/post\u0026#34;);\r}}\rauthText=\u0026#34;Sign Up\u0026#34;\rusername=\u0026#34;none\u0026#34;\r\u0026gt;\r//other components implementations here\r\u0026lt;/Layout\u0026gt;\r);\r}\rexport default index; Here, we imported useRouter from \u0026ldquo;next/router\u0026rdquo; and created a constant router with the useRouter() function, and then updated the handleClick. When we click on the Sign-Up button on the landing page, we\u0026rsquo;ll be redirected to the post page.\nWhat\u0026rsquo;s Next?\nIn the next lesson, you\u0026rsquo;ll learn how to create a checkout fow with Stripe.\n"
},
{
	"uri": "/8-create-a-checkout-flow/",
	"title": "Create a Checkout Flow ",
	"tags": [],
	"description": "",
	"content": "Objectives In this lab, you will learn how to:\nSetup stripe\nCreate a checkout flow\nTest checkout\nCreating a Checkout flow with Stripe\nFirst, sign in to Stripe or create an account here; click on the Settings icon from the dashboard, click on the Checkout and Payment Links, and create a Company name.\nNext, scroll down and Enable client-only integration.\nNext, navigate to the Products tab and create a product like in the below:\nSave the product and grab the product price id; we’ll use it later to implement the checkout.\nNext, grab the publishable key from the home page and let’s implement the checkout.\nNext, install the Stripe client SDK with the following command:\nnpm install @stripe/stripe-js Now, let\u0026rsquo;s implement the checkout so that when a user clicks on the Become a Member button in the Hero Component, we will redirect the user to the Stripe checkout page to subscribe.\nLet\u0026rsquo;s update the index.js file with the following snippets:\n//pages/index.js\r//other imports here\rimport { loadStripe } from \u0026#34;@stripe/stripe-js\u0026#34;;\rfunction index() {\r// router here\rasync function handleClick() {\rconst stripe = await loadStripe(\r\u0026#34;pk_test_51L4jXPKdTSV8bg8w0fz0kimSG031Xoc5jeB4gXeGCt8x7mASfkAYLQzmJSdYNTbQtNIdeHUnJin1xprNw3958ump00e9nhhn9v\u0026#34;\r);\rconst { error } = await stripe.redirectToCheckout({\rlineItems: [{ price: \u0026#34;price_1L4lEGKdTSV8bg8wWWfunlGh\u0026#34;, quantity: 1 }],\rmode: \u0026#34;subscription\u0026#34;,\rsuccessUrl: \u0026#34;http://localhost:3000/post\u0026#34;,\rcancelUrl: \u0026#34;http://localhost:3000/cancel\u0026#34;,\r});\r}\rreturn (\r\u0026lt;Layout\r//handleClick here\rauthText=\u0026#34;Sign Up\u0026#34;\rusername=\u0026#34;none\u0026#34;\r\u0026gt;\r\u0026lt;View marginBottom=\u0026#34;135px\u0026#34;\u0026gt;\r\u0026lt;Hero handleClick={handleClick} /\u0026gt;\r\u0026lt;/View\u0026gt;\r//other components here\r\u0026lt;/Layout\u0026gt;\r);\r}\rexport default index; In the snippets above, we:\nImported loadStripe from \u0026ldquo;@stripe/stripe-js\u0026rdquo; and used the publishable key and price to implement the handleClick function.\nProvided the success and canceled redirect URLs.\nPassed the handleClick function to the Hero Component.\nWhen users click on the Become a Member button, we\u0026rsquo;ll redirect them to the Stripe checkout page.\nTo test things out, click the button, enter the Stripe test card details, and on successful subscription, we\u0026rsquo;ll be redirected to the post page, as we specified in the handleClick function.\nWhat\u0026rsquo;s Next?\nIn the next lesson, you\u0026rsquo;ll learn how to create accounts for users after they make payment.\n"
},
{
	"uri": "/9-create-user-accounts/",
	"title": "Create User Accounts",
	"tags": [],
	"description": "",
	"content": "Objectives In this lab, you will learn how to:\nSetup a Stripe webhook\nCreate a serverless function for the webhook\nCreate user accounts\nCreating a User Account\nThe idea here is when a user subscribes, we\u0026rsquo;ll get the user details from Stripe and create an account for the user. We\u0026rsquo;ll create a webhook that Stripe will call on a successful subscription to achieve this. First, run the following command and follow the prompt.\namplify add api Choose the following options to complete the process:\nNext, navigate into the membershipwebsite5dcac801 file we created above with the following command:\ncd amplify/backend/function/membershipwebsite5dcac801/src Now, install the aws-sdk and Stripe with the command below:\nnpm install aws-sdk stripe Next, navigate into this amplify/backend/function/membershipwebsite5dcac801/src directory and update the app.js file with the following snippets:\nconst express = require(\u0026#34;express\u0026#34;);\rconst bodyParser = require(\u0026#34;body-parser\u0026#34;);\rconst awsServerlessExpressMiddleware = require(\u0026#34;aws-serverless-express/middleware\u0026#34;);\rconst aws = require(\u0026#34;aws-sdk\u0026#34;);\r// declare a new express app\rconst app = express();\rapp.use(\rbodyParser.json({\rverify: function (res, req, buf) {\rreq.rawBody = buf.toString();\r},\r})\r);\rapp.use(awsServerlessExpressMiddleware.eventContext());\r// Enable CORS for all methods\rapp.use(function (req, res, next) {\rres.header(\u0026#34;Access-Control-Allow-Origin\u0026#34;, \u0026#34;*\u0026#34;);\rres.header(\u0026#34;Access-Control-Allow-Headers\u0026#34;, \u0026#34;*\u0026#34;);\rnext();\r});\rconst getStripeKey = async () =\u0026gt; {\rconst { Parameters } = await new aws.SSM()\r.getParameters({\rNames: [\u0026#34;stripe_key\u0026#34;].map((secretName) =\u0026gt; process.env[secretName]),\rWithDecryption: true,\r})\r.promise();\rreturn Parameters[0].Value;\r};\r// post method\rapp.post(\u0026#34;/webhook\u0026#34;, async function (req, res) {\rconst stripeKey = await getStripeKey();\rconst stripe = require(\u0026#34;stripe\u0026#34;)(stripeKey);\rconst customer = await stripe.customers.retrieve(\rreq.body.data.object.customer\r);\rconst userEmail = customer.email;\rconst cognito = new aws.CognitoIdentityServiceProvider({\rapiVersion: \u0026#34;2016-04-18\u0026#34;,\r});\rcognito.adminCreateUser(\r{\rUserPoolId: process.env.AUTH_MEMBERSHIPWEBSITE_USERPOOLID,\rUsername: userEmail,\rDesiredDeliveryMediums: [\u0026#34;EMAIL\u0026#34;],\rUserAttributes: [\r{\rName: \u0026#34;email\u0026#34;,\rValue: userEmail,\r},\r],\rValidationData: [\r{\rName: \u0026#34;email\u0026#34;,\rValue: userEmail,\r},\r],\r},\rfunction (err, data) {\rif (err) {\rconsole.log(err);\r} else {\rconsole.log(data);\r}\r}\r);\r});\rapp.listen(3000, function () {\rconsole.log(\u0026#34;App started\u0026#34;);\r});\rmodule.exports = app; Most snippets above were generated when we followed the amplify add api command prompts, and we added the following:\nImported the aws-sdk using the require function\nAdded the verify option to the bodyParser function and set it to an anonymous function.\nImplemented the post route and did the following:\nCreated the stripeKey constant and set to the getStripeKey() function.\nImported stripe using the Node.js require function and added the stripeKey.\nRetrieved the customer detail using the stripe instance and set the userEmail to customer email. cognito, called the adminCreateUser() function, and created the user.\nWe passed an anonymous function as a second parameter to the route.\nWhen a user subscribes again, we\u0026rsquo;ll get an email with the user email as username and a generated temporal password. Also, if we inspect the Stripe webhook, we will see the user details.\nIf successfully, we will see the email\nWhat\u0026rsquo;s Next?\nIn the next lesson, you\u0026rsquo;ll learn how to protect the website from unauthorized customers.\n"
},
{
	"uri": "/10-authenticate-the-customers/",
	"title": "Authenticate the Customers",
	"tags": [],
	"description": "",
	"content": "Objectives In this lab, you will learn how to:\nCreate UI for authentication\nProtect the customer area from unauthorized access\nAuthenticating Users\nWe want to protect the post page so the only signed users can access it; let\u0026rsquo;s update the post.js file with the following snippets:\n//pages/post.js\r//other imports here\rimport {Authenticator,Flex,Heading,Text,useTheme,View,} from \u0026#34;@aws-amplify/ui-react\u0026#34;;\rimport { Footer, Logo, Stories } from \u0026#34;../ui-components\u0026#34;;\rfunction Post() {\rconst authComponents = {\rHeader() {\rconst { tokens } = useTheme();\rreturn (\r\u0026lt;Flex\rjustifyContent={\u0026#34;center\u0026#34;}\rdirection=\u0026#34;column\u0026#34;\rpaddingTop={tokens.space.xxxl}\rpaddingBottom={tokens.space.xxl}\r\u0026gt;\r\u0026lt;Logo /\u0026gt;\r\u0026lt;/Flex\u0026gt;\r);\r},\r};\rreturn (\r\u0026lt;Authenticator components={authComponents} hideSignUp={true}\u0026gt;\r{({ signOut, user }) =\u0026gt; (\r\u0026lt;Layout\rhandleClick={() =\u0026gt; signOut()}\rauthText=\u0026#34;Sign Out\u0026#34;\rusername={user.attributes.email.split(\u0026#34;@\u0026#34;)[0]}\r\u0026gt;\r// other components here\r\u0026lt;/Layout\u0026gt;\r)}\r\u0026lt;/Authenticator\u0026gt;\r);\r}\rexport default Post; In the snippets above, we:\nImported Authenticator, useTheme, and Flex from \u0026ldquo;@aws-amplify/ui-react\u0026rdquo; and imported Logo from \u0026ldquo;ui-components.\u0026rdquo;\nCreated authComponent object, created a Header() function inside it, destructured tokens from the useTheme() function, and used Flex to render the Logo component.\nWrapped the Layout with Authenticator and passed authComponent to its components prop. Passed the signOut function to the Layout handleClick event and updated the username value with the user parameter.\nClick Sign Up, when the page pops up like this\nCopy Your temporary password from your email and change your password\nWhen you re-enter the site, you will have to re-verify your information\nCheck your email\nAnd you have done the customer authentication part.\n"
},
{
	"uri": "/11-conclusion/",
	"title": "Conclusion",
	"tags": [],
	"description": "",
	"content": "In this lab, you learned how to:\nTheme a design in Figma for your AWS Amplify project Create Amplify projects Convert convert components in Figam to React code Integrate Stripe with your AWS Amplify project Protect your website with authentication If you\u0026rsquo;re looking to learn more about Amplify, head to our docs and join our Discord community.\n"
},
{
	"uri": "/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]