[
{
	"uri": "/vi/1-introduce/",
	"title": "Giới thiệu",
	"tags": [],
	"description": "",
	"content": "Xây dựng trang web thành viên với Amplify, Stripe và Next.js Nội dung\nGiới thiệu\nTạo bản sao dự án thiết kế\nTạo một dự án Amplify Project\nThiết lập dự án Next.js\nKéo thành phần từ Amplify\nRàng buộc dữ liệu với các thành phần\nXây dựng trang web\nTạo quy trình thanh toán\nTạo tài khoản người dùng\nXác thực khách hàng\nKết luận\n"
},
{
	"uri": "/vi/",
	"title": "Xây dựng trang web thành viên với Amplify, Stripe và Next.js",
	"tags": [],
	"description": "",
	"content": "Tổng quan Xây dựng trang web thành viên với Amplify, Stripe và Next.js Bạn sẽ học những gì\nKhi kết thúc bài lab này, bạn sẽ học cách sử dụng AWS Amplify để giải quyết các vấn đề trong thế giới thực bằng cách xây dựng một trang web hoạt động.\nBạn sẽ xây dựng những gì\nBạn sẽ có thể xây dựng một trang web thành viên với tính năng xác thực và tích hợp Stripe sau khi hoàn thành bài lab này.\nCác mục cần chuẩn bị trước\nKiến thức cơ bản về JavaScript và React.js. Node.js đã được cài đặt trên máy tính của chúng ta. Có hiểu biết tương đối về Next.js nhưng không bắt buộc. Tài khoản AWS Amplify; tạo một tài khoản tại đây. Tài khoản Figma; tạo một tài khoản miễn phí tại đây. Tài khoản Stripe ; tạo một tại đây. Nếu muốn nâng cao trình độ sơ cấp hơn thì học Amplify, (Không bắt buộc với bài lab này) "
},
{
	"uri": "/vi/2-create-a-copy-of-the-design-project/",
	"title": "Tạo một bản sao của dự án thiết kế",
	"tags": [],
	"description": "",
	"content": "Mục tiêu Trong lab này, bạn sẽ học cách:\nBắt đầu một dự án thiết kế bằng cách sử dụng mẫu Amplify Chủ đề thiết kế theo sở thích của bạn Tạo thiết kế dự án\nChúng ta cần tạo một bản sao của design file này để bắt đầu. Thiết kế được tạo bằng cách sao chép mẫu giao diện người dùng AWS Amplify chính thức và thêm một chủ đề khác.\nChúng ta có thể thấy thiết kế đã được tạo ra, bạn có thể phóng to để hiển thị rõ ràng:\nMặc dù chúng ta sẽ sử dụng tệp thiết kế tùy chỉnh cho dự án này, nhưng chúng ta cũng hãy xem cách sử dụng thư viện giao diện người dùng chính thức cho các dự án trong tương lai.\nVì vậy, trong cộng đồng Figma, hãy tìm kiếm AWS Amplify UI Kit và mở bộ công cụ do Nhóm AWS Amplify duy trì. 2.Chọn tên figma AWS Amplify UI Kit của AWS Amplify.\n3.Nhấp vào nút Get a copy để tạo bản sao của dự án giao diện người dùng AWS Amplify vào tài khoản Figma của chúng tôi.\nDự án AWS Amplify bao gồm các trang sau:\nA readme: mô tả UI project.\nPrimitives: giống như các nút và điều khiển biểu mẫu tạo nên thành phần.\nMy Components: đây là các thành phần có thể tái sử dụng bao gồm các thành phần nguyên thủy mà chúng tôi có thể thả trên trang web của mình.\nExamples: trang này trình bày cách sử dụng các thành phần.\nChỉnh sửa chủ đề thiết kế Dự án\nChúng tôi có thể thay đổi chủ đề mặc định của mẫu giao diện người dùng chính thức; để làm điều đó, chúng tôi cần cài đặt trình chỉnh sửa chủ đề AWS Amplify từ trang cộng đồng Figma.\n1.Hãy tìm kiếm Amplify theme cho AWS Amplify và mở nó, nhấp vào tab plugin và nhấp dùng thử nó.\n2.Nhấp vào Primitives và Nhấn phím lệnh Ctrl + / trên bàn phím để hiển thị bảng lệnh Figma trở lại dự án Figma.\n3.Hãy nhấp vào Component cho trình chỉnh sửa chủ đề AWS và mở nó, điều hướng đến tab thành phần và tìm kiếm button.primary. Và thiết lập màu sắc (bạn có thể chọn như hình ảnh). Sau đó nhấp vào Save.\n4.Khi lưu, chúng ta sẽ thấy rằng chúng ta đã cập nhật màu của nút trên trang nguyên thủy.\nGhi chú\nAmplify khuyên chúng ta không nên thay đổi trực tiếp các nguyên mẫu; bảng vẽ của các thành phần bị khóa để tránh vô tình thay đổi Thành phần.\nCác nguyên mẫu có ánh xạ một-một với thư viện AWS Amplify React UI mà chúng ta sẽ sử dụng khi kéo thành phần vào dự án phản ứng của mình. Thay đổi nguyên thủy sẽ khiến nó không đồng bộ với thư viện React UI.\nAmplify sẽ cung cấp luôn cho chúng ta một đối tượng chứa các theme mà chúng ta đang sử dụng. Sau đó, chúng tôi có thể chuyển nó đến thư viện React UI để tùy chỉnh nó.\nTrên trang thành phần, bạn sẽ thấy rằng tất cả các màu nút đã được cập nhật tương ứng, điều tương tự trên trang ví dụ\nThiết kế chúng ta sẽ sử dụng\nThay vì Bộ công cụ giao diện người dùng Amplify chính thức trong dự án này, chúng tôi sẽ sử dụngcustomized one đã có sẵn phù hợp với trang web thành viên của chúng tôi. Sau đây là những gì đã được chỉnh sửa:\nTrên trang Primitives - màu của nút được đổi thành màu cam và màu nền thành màu xanh đậm, v.v. Trên trang Components - sử dụng chủ đề tùy chỉnh và tạo các thành phần sau: The Hero component.\nThe testimony component.\nThe story component\nThe Nav Component và the Footer component.\nTrên trang Examples - một trang web hoàn chỉnh được xây dựng bằng cách sử dụng các thành phần. Trang web bao gồm một trang đích và một trang được bảo vệ bằng tường phí. Cái gì tiếp theo?\nTrong bài học tiếp theo, bạn sẽ học cách thiết lập một dự án Amplify.\n"
},
{
	"uri": "/vi/3-create-an-amplify-project/",
	"title": "Create an Amplify Project",
	"tags": [],
	"description": "",
	"content": "Mục tiêu Trong lab này, bạn sẽ học cách:\nTạo dự án Amplify\nThiết lập xác thực\nThêm mô hình dữ liệu\nTạo dữ liệu giả cho mô hình của bạn\nNhập linh kiện từ Figma\nTạo dự án Amplify\nĐăng nhập vào AWS bảng điều khiển hoặc tạo tài khoản tại đây. Tìm kiếm AWS Amplify từ thanh tìm kiếm và chọn nó từ danh sách dịch vụ.\nNhấp chon Get start\nTiếp theo, nhấp vào menu thả xuống New app và chọn Buid an app.\nĐặt tên membership-website cho ứng dụng và nhấp vào nút Confirm deployment.\nChờ để cài đặt\nSau quá trình triển khai, hãy nhấp vào nút Launch studio để khởi chạy studio dàn dựng trong tab mới.\nTrong studio Amplify, chúng tôi sẽ thêm xác thực vào dự án, lập mô hình cơ sở dữ liệu và triển khai nó, thêm nội dung vào cơ sở dữ liệu và nhập các thành phần giao diện người dùng từ Figma bằng trình tạo giao diện người dùng.\nThêm xác thực\nĐiều hướng đến tab authentication vì chúng tôi chỉ cần người dùng đã đăng nhập để truy cập nội dung của chúng tôi. Cơ chế đăng nhập vẫn như cũ; sau đó, khi định cấu hình phần đăng ký, hãy nhấp vào cài đặt bảo vệ bằng mật khẩu và đặt mật khẩu mạnh hoặc yếu nhất có thể.\nBỏ chọn tất cả các hộp kiểm khác ngoại trừ hộp kiểmInclude lowercase characters và nhấp vào Deploy để triển khai xác thực.\nNhấp chọn Confirm deployment\nCài đặt này có thể mất vài phút\nNếu thành công thì sẽ hiện như sau:\nTạo mô hình dữ liệu\nĐiều hướng đến phần data và tạo các mô hình dữ liệu sau:\nTestimonial - có các trường id, name, avatar, và testimony fields.\nPost - điều này sẽ có các trường id, body, and description và mô tả cũng như trường readTime đọc với loại số nguyên.\nSau khi tạo mô hình và thêm trường, hãy nhấp vào nút Save and Deploy để triển khai cơ sở dữ liệu.\nThêm Nội dung vào Mô hình Dữ liệu\nTại trang này ta sẽ thấy như sau:\nĐiều hướng đến phần content, chọn bảng Testimonial hoặc Bài đăng từ trình đơn thả xuống của bảng được chọn và nhấp vào Auto-generate seed data.\nĐối với bảng Testimonial, đặt các hàng thành 6, thêm các ràng buộc như bên dưới và nhấp vào nút Generate data:\nSau khi tạo dữ liệu, chúng tôi có thể cập nhật các trường hình đại diện với các URL hình đại diện mong muốn.\nĐặt các hàng thành 10 cho bảng Bài đăng, thêm constraints và nhấp vào nút Generate data để khởi tạo bảng.\nNhập các thành phần giao diện người dùng từ Figma\nChúng tôi sẽ nhập thiết kế tùy chỉnh từ Figma vào Amplify Studio, lấy URL từ Figma và điều hướng tab UI Library.\nTiếp theo, nhấp vào nút Get Started và dán Figma design URL trong trường nhập và nhấp vào Continue.\nSau khi nhập thành công các thành phần Figma, nhấp vào Accept all changes.\nTiếp theo, nhấp vào Accept all để chấp nhận tất cả các thành phần đã nhập.\nBây giờ, chúng ta có tất cả các thành phần trong dự án Amplify giống như trong Figma.\nCái gì tiếp theo?\nTrong bài học tiếp theo, chúng ta sẽ thiết lập dự án Next.js.\n"
},
{
	"uri": "/vi/4-setup-a-next.js-project/",
	"title": "Thiết lập Dự án Next.js",
	"tags": [],
	"description": "",
	"content": "Mục tiêu Trong lab này, bạn sẽ học cách:\nThiết lập dự án Next.js Thiết lập Ứng dụng Next.js\nĐể tạo một ứng dụng Next.js mới, hãy chạy các lệnh sau trong thiết bị đầu cuối của chúng tôi:\nnpx create-next-app membership-website Sau khi tạo ứng dụng, chúng ta sẽ điều hướng vào thư mục dự án bằng lệnh bên dưới:\ncd membership-website Tiếp theo, cài đặt các phụ thuộc sau:\naws-amplify - để cấp cho chúng tôi quyền truy cập SDK khuếch đại\n@aws-amplify/ui-react - phần phụ thuộc này có ánh xạ một-một với trang nguyên thủy trong Thiết kế giao diện người dùng Figma.\n@fontsource/inter - để chúng tôi có thể điều chỉnh phông chữ của dự án.\nLệnh dưới đây sẽ cài đặt các phụ thuộc trên:\nnpm install aws-amplify @aws-amplify/ui-react @fontsource/inter Một vài bước cuối cùng:\nTạo tệp reset.css bên trong thư mục styles trong thư mục gốc. Sao chép thuộc tính globals.css và dán vào bên trong tệp reset.css. Xóa các kiểu trong globals.css và thêm màu nền #091B2A vào phần thân. Cái gì tiếp theo?\nTrong bài học tiếp theo, hãy kéo tất cả các thành phần giao diện người dùng và mô hình dữ liệu từ Figma vào dự án Next.js mới.\n"
},
{
	"uri": "/vi/5-pull-components-from-amplify/",
	"title": "Kéo các thành phần từ Amplify",
	"tags": [],
	"description": "",
	"content": "Mục tiêu Trong lab này, bạn sẽ học cách:\nKéo linh kiện và model từ Amplify\nTest linh kiện\nLấy thành phần từ AWS Amplify\nĐể kéo các thành phần Amplify xuống ứng dụng Next.js, chúng ta phải cài đặt AWS Giao diện dòng lệnh trong máy cục bộ và được ủy quyền.\nCài đặt AWS CLI bằng lệnh sau:\nnpm install -g @aws-amplify/cli Nhấp vào Local setup instructions, sao chép lệnh kéo và chạy nó trong thiết bị đầu cuối trong Studio.\nTiếp theo, ủy quyền cho Amplify CLI và làm theo lời nhắc bên dưới để kéo các thành phần, mô hình dữ liệu, xác thực và các cài đặt Amplify khác.\nAWS sẽ thêm các thư mục sau vào ứng dụng Next.js.\nvscode - nơi này chứa một số cấu hình từ AWS đến VSCode\namplify - phần này chứa các cấu hình phụ trợ AWS.\nmodels - cái này chứa các lược đồ mô hình\nui-components - đây là điều quan trọng nhất đối với dự án của chúng ta. Nó bao gồm tất cả các thiết kế/thành phần Figma của chúng tôi.\nTiếp theo, chúng ta sẽ nhập các cấu hình Amplify và bọc ứng dụng Next.js bằng cấu hình đó. Để thực hiện việc này, hãy cập nhật tệp _app.js bằng các đoạn mã sau:\nimport \u0026#34;../styles/globals.css\u0026#34;; import { Amplify } from \u0026#34;aws-amplify\u0026#34;; import { studioTheme } from \u0026#34;../ui-components\u0026#34;; import { AmplifyProvider } from \u0026#34;@aws-amplify/ui-react\u0026#34;; import \u0026#34;@aws-amplify/ui-react/styles.css\u0026#34;; import \u0026#34;@fontsource/inter\u0026#34;; import \u0026#34;../styles/reset.css\u0026#34;; import awsconfig from \u0026#34;../aws-exports\u0026#34;; Amplify.configure(awsconfig); function MyApp({ Component, pageProps }) { return ( \u0026lt;AmplifyProvider theme={studioTheme}\u0026gt; \u0026lt;Component {...pageProps} /\u0026gt; \u0026lt;/AmplifyProvider\u0026gt; ); } export default MyApp; Trong đoạn mã trên, chúng tôi đã làm như sau:\nĐã nhập Amplify từ aws-amplify, studioTheme từ ui-components và AmplifyProvider từ @aws-amplify/ui-react.\nĐã nhập awsconfig từ \u0026ldquo;../aws-exports\u0026rdquo; và sử dụng nó để định cấu hình Khuếch đại.\nBao bọc các Thành phần bằng AmplifyProvider và chuyển studioTheme làm chủ đề chống đỡ.\nChúng ta đã kết nối thành công môi trường phụ trợ AWS với ứng dụng Next.js của mình. Để kiểm tra mọi thứ, hãy nhập một thành phần từ thư mục ui-components trong tệp index.js như bên dưới:\nimport React from \u0026#34;react\u0026#34;; import { Hero } from \u0026#34;../ui-components\u0026#34;; import { View } from \u0026#34;@aws-amplify/ui-react\u0026#34;; function index() { return ( \u0026lt;View\u0026gt; \u0026lt;Hero /\u0026gt; \u0026lt;/View\u0026gt; ); } export default index; Ở đây, chúng tôi đã nhập thành phần Hero và View, giống như một trình bao bọc div bao bọc các phần tử.\nTiếp theo, hãy chạy lệnh sau để khởi động máy chủ phát triển:\nnpm run dev #to start the dev server Next.js sẽ bắt đầu một môi trường phát triển tại http://localhost:3000 trong trình duyệt; ứng dụng của chúng tôi sẽ trông giống như mong đợi:\nCái gì tiếp theo?\nTrong bài học tiếp theo, bạn sẽ học cách liên kết dữ liệu với các thành phần.\n"
},
{
	"uri": "/vi/6-bind-data-to-the-components/",
	"title": "Liên kết dữ liệu với các thành phần",
	"tags": [],
	"description": "",
	"content": "Mục tiêu Trong lab này, bạn sẽ học cách:\nLiên kết dữ liệu với các thành phần\nLiên kết các sự kiện với các thành phần\nLiên kết dữ liệu với Component\nĐể thổi sức sống vào các thành phần, chúng tôi sẽ liên kết dữ liệu và sự kiện với chúng trong Amplify Studio. Chúng ta sẽ bắt đầu với thành phần Nav.\nNhấp vào tab UI Library, nhấp vào Nav và nhấp vào nút configure để liên kết dữ liệu và sự kiện với thành phần Nav.\nTiếp theo, trong hộp thoại cấu hình, nhấp vào thư mục gốc của thành phần (Nav) và nhấp vào Add prop. Chúng tôi sẽ tạo các đạo cụ cấp cao nhất sau đây và sử dụng chúng trong các phần tử có thành phần Nav.\nusername: prop này sẽ nhận tên người dùng trên trang web.\nauthText: prop này sẽ hiển thị các nút đăng nhập hoặc đăng xuất tùy thuộc vào sự phân quyền của người dùng.\navatar: cái này sẽ xử lý avatar của người dùng.\nhandleAuth: điều này sẽ xử lý sự kiện ủy quyền.\nTrong thành phần Nav, chúng tôi muốn ẩn tên người dùng nếu không có người dùng, vì vậy hãy chọn thành phần người dùng và nhấp vào nút Set prop; bên cạnh các thuộc tính con.\nChọn display từ danh sách đạo cụ, nhấp vào ba dấu chấm dọc bên cạnh nó, nhấp vào add conditional và thêm điều kiện như bên dưới:\nĐối với văn bản avatar, hãy chọn nó, nhấp vào nút Set text label và đặt label cho hình đại diện, còn đối với tên người dùng, hãy chọn nó và đặt nhãn của nó thành tên người dùng.\nĐối với nút, hãy chọn nút đó, nhấp vào Set an onClick action, chọn chỗ dựa onClick và đặt giá trị của nó thành handleAuth. Ngoài ra, hãy nhấp vào Set prop, chọn label prop và đặt giá trị thành authText.\nĐối với thành phần Hero, chúng ta sẽ tạo một chỗ dựa cấp cao nhất handleClick và đặt loại của nó thành Trình xử lý sự kiện. Chọn phần tử Button và đặt chỗ dựa onClick của nó thành handleClick mà chúng ta đã tạo ở trên.\nChúng tôi sẽ tạo hai đạo cụ cấp cao nhất cho thành phần Persuade, handleClick và banner, sau đó đặt loại của chúng thành Trình xử lý sự kiện và String.\nTiếp theo, chọn phần tử Button, chọn giá đỡ onClick và đặt nó thành handleClick mà chúng ta đã tạo. Chọn phần tử Banner, chọn chỗ dựa src và đặt nó thành chỗ dựa banner mà chúng ta đã tạo.\nĐối với thành phần Testimony, chúng tôi sẽ liên kết dữ liệu hơi khác một chút; không giống như các thành phần trước đó, chúng tôi sẽ ràng buộc dữ liệu được cung cấp trong cơ sở dữ liệu của chúng tôi với thành phần Testimony.\nNhấp vào Thành phần Testimony và nhấp vào configure, chọn gốc của Thành phần và nhấp vào Add prop, Tạo chỗ dựa cấp cao nhất testimonyModel và đặt loại của nó thành mô hình dữ liệu Testimonial . Tất cả các thành phần của Thành phần Testimony sẽ có quyền truy cập vào các hàng trong bảng Lời chứng thực.\nBây giờ, hãy đặt các phần tử Thành phần Testimony thành các hàng khác nhau của mô hình dữ liệu Chứng thực.\nChọn thành phần image, nhấp vào Set prop, chọn src prop và đặt nó thành testimonyModel.avatar. Chọn phần tử Author, nhấp vào Set prop, chọn label prop và đặt giá trị đó thành testimonyModel.name. Chọn phần tử văn bản Testimony, nhấp vào \u0026ldquo;Set prop,\u0026rdquo; chọn nhãn prop và đặt nó thành testsModel.testimony. Tiếp theo, nhấp vào Create collection để tạo thẻ cho tổng số bản ghi trong Testimonial data table. Thay đổi hiển thị thành Grid trên trang bộ sưu tập và đặt cột thành 3.\nTiếp theo, điều hướng trở lại UI Library; hãy lặp lại quy trình cho Thành phần Story giống như chúng ta đã làm cho Thành phần Testimony.\nBây giờ, chọn Thành phần Story, nhấp vào nút configure, chọn root của Thành phần và nhấp vào Add prop. Tạo một prop postModel cấp cao nhất và đặt nó vào mô hình dữ liệu Post.\nĐể liên kết dữ liệu postModel với các phần tử Thành phần câu chuyện, chúng tôi sẽ chọn:\nPhần tử bannar, đặt giá trị src của nó thành bất kỳ hình ảnh tĩnh nào. Click vào Set prop và đặt prop nhãn là postModel.title cho phần tử title. Phần tử Description và đặt giá đỡ nhãn văn bản của nó thành postModel.description. Phần tử ReadTime và đặt chỗ dựa nhãn của nó thành postModel.readTime; đồng thời, chúng ta sẽ nối một chuỗi mins read. Tiếp theo, nhấn nút Create collection, đặt tên cho bộ sưu tập là Stories. Trong trang collection, đặt màn hình thành Grid và column thành 3, sau đó thêm padding 10px quanh hộp.\nCái gì tiếp theo?\nTrong bài học tiếp theo, bạn sẽ học cách xây dựng trang web hoàn chỉnh bằng cách sử dụng các thành phần.\n"
},
{
	"uri": "/vi/7-build-the-website-pages/",
	"title": "Xây dựng các trang Website",
	"tags": [],
	"description": "",
	"content": "Objectives Mục tiêu Trong lab này, bạn sẽ học cách:\nSử dụng các thành phần để xây dựng website\nXây dựng trang web\nTrước tiên, hãy chạy lệnh sau để kéo các thay đổi liên kết dữ liệu mà chúng tôi đã thực hiện vào dự án Next.js.\namplify pull Tiếp theo, tạo một thư mục components; bên trong nó, tạo tệp Layout.js với các đoạn mã sau:\n//components/Layout.js\rimport React from \u0026#34;react\u0026#34;;\rimport { View } from \u0026#34;@aws-amplify/ui-react\u0026#34;;\rimport { Nav } from \u0026#34;../ui-components\u0026#34;;\rfunction Layout({ children, authText, handleClick, username }) {\rreturn (\r\u0026lt;View width=\u0026#34;1200px\u0026#34; marginLeft=\u0026#34;auto\u0026#34; marginRight=\u0026#34;auto\u0026#34;\u0026gt;\r\u0026lt;Nav\rmarginTop={\u0026#34;20px\u0026#34;}\rhandleAuth={handleClick}\rauthText={authText}\rusername={username}\ravatar={username.split(\u0026#34;\u0026#34;)[0].toUpperCase()}\r/\u0026gt;\r{children}\r\u0026lt;/View\u0026gt;\r);\r}\rexport default Layout; Trong các đoạn trên, chúng tôi:\nĐã nhập Chế độ xem từ \u0026ldquo;@aws-amplify/ui-react\u0026rdquo; và Điều hướng từ ui-components.\nChế độ xem được hiển thị dưới dạng div trình bao bọc cho thành phần Nav và chỗ dựa con.\nKết xuất thành phần Nav và chuyển một số đạo cụ bố cục cho nó.\nTiếp theo, sửa đổi tệp index.js như bên dưới:\n//pages/index.js\rimport React from \u0026#34;react\u0026#34;;\rimport { Flex, View } from \u0026#34;@aws-amplify/ui-react\u0026#34;;\rimport { Footer, Hero, Persuade, Testimonies } from \u0026#34;../ui-components\u0026#34;;\rimport Layout from \u0026#34;../components/Layout\u0026#34;;\rfunction index() {\rreturn (\r\u0026lt;Layout handleClick={() =\u0026gt; {}} authText=\u0026#34;Sign Up\u0026#34; username=\u0026#34;none\u0026#34;\u0026gt;\r\u0026lt;View marginBottom=\u0026#34;135px\u0026#34;\u0026gt;\r\u0026lt;Hero handleClick={() =\u0026gt; {}} /\u0026gt;\r\u0026lt;/View\u0026gt;\r\u0026lt;View\u0026gt;\r\u0026lt;Testimonies /\u0026gt;\r\u0026lt;/View\u0026gt;\r\u0026lt;Flex justifyContent={\u0026#34;center\u0026#34;}\u0026gt;\r\u0026lt;Persuade banner=\u0026#34;https://i.imgur.com/MxbD3N4.png\u0026#34; /\u0026gt;\r\u0026lt;/Flex\u0026gt;\r\u0026lt;View marginTop=\u0026#34;50px\u0026#34; marginBottom=\u0026#34;50px\u0026#34;\u0026gt;\r\u0026lt;Footer /\u0026gt;\r\u0026lt;/View\u0026gt;\r\u0026lt;/Layout\u0026gt;\r);\r}\rexport default index; Trong các đoạn trên, chúng tôi:\nĐã nhập Flex và Chế độ xem từ \u0026ldquo;@aws-amplify/ui-react\u0026rdquo; và các thành phần Hero, Persuade, Testimonies và Footer từ các thành phần ui.\nĐã nhập Layout.js từ thư mục thành phần, hiển thị nó và thông qua các props handleClick, authText và tên người dùng.\nĐã sử dụng View và Flex và kết xuất các thành phần của chúng tôi trong thành phần trình bao bọc Layout.js. Lưu ý rằng thành phần tên người dùng không hiển thị trong Nav. Đó là bởi vì chúng tôi không thông qua giá trị của nó.\nTiếp theo, hãy tạo một trang bài đăng nơi chúng tôi sẽ hiển thị thành phần Câu chuyện; bên trong thư mục pages, tạo tệp post.js với các đoạn mã sau:\n//pages/post.js\rimport React from \u0026#34;react\u0026#34;;\rimport { Heading, Text, View } from \u0026#34;@aws-amplify/ui-react\u0026#34;;\rimport Layout from \u0026#34;../components/Layout\u0026#34;;\rimport { Footer, Stories } from \u0026#34;../ui-components\u0026#34;;\rfunction Post() {\rreturn (\r\u0026lt;Layout\rhandleClick={() =\u0026gt; {}}\rauthText=\u0026#34;Sign Out\u0026#34;\rusername={\u0026#34;christian@hotmail.com\u0026#34;.split(\u0026#34;@\u0026#34;)[0]}\r\u0026gt;\r\u0026lt;View marginTop=\u0026#34;50px\u0026#34; marginBottom=\u0026#34;30px\u0026#34;\u0026gt;\r\u0026lt;Heading level={2}\u0026gt;Welcome to our backstage\u0026lt;/Heading\u0026gt;\r\u0026lt;Text marginTop=\u0026#34;20px\u0026#34;\u0026gt;\rDiscover stories,thinking, and expertise from writers on any top{\u0026#34; \u0026#34;}\r\u0026lt;/Text\u0026gt;\r\u0026lt;/View\u0026gt;\r\u0026lt;Stories /\u0026gt;\r\u0026lt;View marginTop=\u0026#34;50px\u0026#34; marginBottom=\u0026#34;50px\u0026#34;\u0026gt;\r\u0026lt;Footer /\u0026gt;\r\u0026lt;/View\u0026gt;\r\u0026lt;/Layout\u0026gt;\r);\r}\rexport default Post; Trong đoạn mã trên, chúng tôi đã làm như sau:\nĐã nhập các thành phần Tiêu đề và Văn bản để định dạng văn bản của chúng tôi và thành phần Xem để bao bọc Văn bản và các thành phần khác.\nĐã nhập các thành phần Layout.js, hiển thị chúng và triển khai trang bài đăng bên trong nó. Nếu chúng tôi điều hướng đến /post trong trình duyệt, chúng tôi sẽ thấy trang bài đăng của mình có thành phần câu chuyện trong đó. Để điều hướng đến trang bài đăng từ trang đích, hãy cập nhật index.js bằng các đoạn mã bên dưới:\n//pages/index.js\r//other imports here\rimport { useRouter } from \u0026#34;next/router\u0026#34;;\rfunction index() {\rconst router = useRouter();\rreturn (\r\u0026lt;Layout\rhandleClick={() =\u0026gt; {\rrouter.push(\u0026#34;/post\u0026#34;);\r}}\rauthText=\u0026#34;Sign Up\u0026#34;\rusername=\u0026#34;none\u0026#34;\r\u0026gt;\r//other components implementations here\r\u0026lt;/Layout\u0026gt;\r);\r}\rexport default index; Ở đây, chúng tôi đã nhập useRouter từ \u0026ldquo;next/router\u0026rdquo; và tạo một bộ định tuyến không đổi với hàm useRouter(), sau đó cập nhật handleClick. Khi chúng tôi nhấp vào nút Đăng ký trên trang đích, chúng tôi sẽ được chuyển hướng đến trang đăng bài.\nCái gì tiếp theo?\nTrong bài học tiếp theo, bạn sẽ học cách tạo quy trình thanh toán với Stripe.\n"
},
{
	"uri": "/vi/8-create-a-checkout-flow/",
	"title": "Tạo quy trình thanh toán ",
	"tags": [],
	"description": "",
	"content": "Mục tiêu Trong lab này, bạn sẽ học cách:\nThiết lập stripe\nTạo quy trình thanh toán\nKiểm tra kiểm tra\nTạo quy trình Thanh toán bằng Stripe\nTrước tiên, hãy đăng nhập vào Stripe hoặc tạo một tài khoản tại đây; nhấp vào biểu tượng Settingstừ bảng điều khiển, nhấp vào Checkout and Payment Links, và name Company.\nTiếp theo, cuộn xuống và chọn Enable client-only integration.\nTiếp theo, điều hướng đến tab Products và tạo một sản phẩm như bên dưới:\nLưu sản phẩm và lấy id giá sản phẩm; chúng tôi sẽ sử dụng nó sau để triển khai thanh toán.\nTiếp theo, lấy khóa có thể xuất bản từ trang chủ và hãy triển khai thanh toán. Tiếp theo, cài đặt SDK máy khách Stripe bằng lệnh sau:\nnpm install @stripe/stripe-js Bây giờ, hãy triển khai thanh toán để khi người dùng nhấp vào nút Become a Member trong Thành phần Hero, chúng tôi sẽ chuyển hướng người dùng đến trang thanh toán Stripe để đăng ký.\nHãy cập nhật tệp index.js với các đoạn mã sau:\n//pages/index.js\r//other imports here\rimport { loadStripe } from \u0026#34;@stripe/stripe-js\u0026#34;;\rfunction index() {\r// router here\rasync function handleClick() {\rconst stripe = await loadStripe(\r\u0026#34;pk_test_51L4jXPKdTSV8bg8w0fz0kimSG031Xoc5jeB4gXeGCt8x7mASfkAYLQzmJSdYNTbQtNIdeHUnJin1xprNw3958ump00e9nhhn9v\u0026#34;\r);\rconst { error } = await stripe.redirectToCheckout({\rlineItems: [{ price: \u0026#34;price_1L4lEGKdTSV8bg8wWWfunlGh\u0026#34;, quantity: 1 }],\rmode: \u0026#34;subscription\u0026#34;,\rsuccessUrl: \u0026#34;http://localhost:3000/post\u0026#34;,\rcancelUrl: \u0026#34;http://localhost:3000/cancel\u0026#34;,\r});\r}\rreturn (\r\u0026lt;Layout\r//handleClick here\rauthText=\u0026#34;Sign Up\u0026#34;\rusername=\u0026#34;none\u0026#34;\r\u0026gt;\r\u0026lt;View marginBottom=\u0026#34;135px\u0026#34;\u0026gt;\r\u0026lt;Hero handleClick={handleClick} /\u0026gt;\r\u0026lt;/View\u0026gt;\r//other components here\r\u0026lt;/Layout\u0026gt;\r);\r}\rexport default index; Trong các đoạn trên, chúng tôi:\nĐã nhập loadStripe từ \u0026ldquo;@stripe/stripe-js\u0026rdquo; và sử dụng khóa và giá có thể xuất bản để triển khai chức năng handleClick.\nCung cấp các URL chuyển hướng thành công và bị hủy.\nĐã chuyển chức năng handleClick cho Thành phần Stripe.\nKhi người dùng nhấp vào nút Become a Member chúng tôi sẽ chuyển hướng họ đến trang thanh toán của Stripe.\nĐể kiểm tra mọi thứ, hãy nhấp vào nút, nhập chi tiết thẻ kiểm tra Stripe và khi đăng ký thành công, chúng tôi sẽ được chuyển hướng đến trang bài đăng, như chúng tôi đã chỉ định trong chức năng handleClick.\nCái gì tiếp theo?\nTrong bài học tiếp theo, bạn sẽ học cách tạo tài khoản cho người dùng sau khi họ thanh toán.\n"
},
{
	"uri": "/vi/9-create-user-accounts/",
	"title": "Tạo tài khoản người dùng",
	"tags": [],
	"description": "",
	"content": "Mục tiêu Trong lab này, bạn sẽ học cách:\nThiết lập webhook Stripe\nTạo chức năng serverless cho webhook\nTạo tài khoản người dùng\nTạo tài khoản người dùng\nÝ tưởng ở đây là khi người dùng đăng ký, chúng tôi sẽ lấy thông tin chi tiết về người dùng từ Stripe và tạo tài khoản cho người dùng. Chúng tôi sẽ tạo một webhook mà Stripe sẽ yêu cầu đăng ký thành công để đạt được điều này. Đầu tiên, chạy lệnh sau và làm theo lời nhắc.\namplify add api Chọn các tùy chọn sau để hoàn tất quy trình:\nTiếp theo, điều hướng đến tệp Membershipwebsite5dcac801 mà chúng ta đã tạo ở trên bằng lệnh sau:\ncd amplify/backend/function/membershipwebsite5dcac801/src Bây giờ, hãy cài đặt aws-sdk và Stripe bằng lệnh bên dưới:\nnpm install aws-sdk stripe Tiếp theo, điều hướng vào thư mục amplify/backend/function/membershipwebsite5dcac801/src này và cập nhật tệp app.js với các đoạn mã sau:\nconst express = require(\u0026#34;express\u0026#34;);\rconst bodyParser = require(\u0026#34;body-parser\u0026#34;);\rconst awsServerlessExpressMiddleware = require(\u0026#34;aws-serverless-express/middleware\u0026#34;);\rconst aws = require(\u0026#34;aws-sdk\u0026#34;);\r// declare a new express app\rconst app = express();\rapp.use(\rbodyParser.json({\rverify: function (res, req, buf) {\rreq.rawBody = buf.toString();\r},\r})\r);\rapp.use(awsServerlessExpressMiddleware.eventContext());\r// Enable CORS for all methods\rapp.use(function (req, res, next) {\rres.header(\u0026#34;Access-Control-Allow-Origin\u0026#34;, \u0026#34;*\u0026#34;);\rres.header(\u0026#34;Access-Control-Allow-Headers\u0026#34;, \u0026#34;*\u0026#34;);\rnext();\r});\rconst getStripeKey = async () =\u0026gt; {\rconst { Parameters } = await new aws.SSM()\r.getParameters({\rNames: [\u0026#34;stripe_key\u0026#34;].map((secretName) =\u0026gt; process.env[secretName]),\rWithDecryption: true,\r})\r.promise();\rreturn Parameters[0].Value;\r};\r// post method\rapp.post(\u0026#34;/webhook\u0026#34;, async function (req, res) {\rconst stripeKey = await getStripeKey();\rconst stripe = require(\u0026#34;stripe\u0026#34;)(stripeKey);\rconst customer = await stripe.customers.retrieve(\rreq.body.data.object.customer\r);\rconst userEmail = customer.email;\rconst cognito = new aws.CognitoIdentityServiceProvider({\rapiVersion: \u0026#34;2016-04-18\u0026#34;,\r});\rcognito.adminCreateUser(\r{\rUserPoolId: process.env.AUTH_MEMBERSHIPWEBSITE_USERPOOLID,\rUsername: userEmail,\rDesiredDeliveryMediums: [\u0026#34;EMAIL\u0026#34;],\rUserAttributes: [\r{\rName: \u0026#34;email\u0026#34;,\rValue: userEmail,\r},\r],\rValidationData: [\r{\rName: \u0026#34;email\u0026#34;,\rValue: userEmail,\r},\r],\r},\rfunction (err, data) {\rif (err) {\rconsole.log(err);\r} else {\rconsole.log(data);\r}\r}\r);\r});\rapp.listen(3000, function () {\rconsole.log(\u0026#34;App started\u0026#34;);\r});\rmodule.exports = app; Hầu hết các đoạn mã trên được tạo khi chúng tôi làm theo lời nhắc lệnh khuếch đại thêm api và chúng tôi đã thêm vào như sau:\nĐã nhập aws-sdk bằng chức năng yêu cầu\nĐã thêm tùy chọn xác minh vào chức năng bodyParser và đặt nó thành chức năng ẩn danh.\nThực hiện lộ trình bài và đã làm như sau:\nTạo hằng số stripeKey và đặt thành hàm getStripeKey().\nĐã nhập stripe bằng chức năng yêu cầu Node.js và thêm stripeKey.\nTruy xuất chi tiết khách hàng bằng cách sử dụng phiên bản stripe và đặt userEmail thành email của khách hàng. cognito, được gọi là hàm adminCreateUser() và tạo người dùng.\nChúng tôi đã chuyển một hàm ẩn danh làm tham số thứ hai cho tuyến đường.\nKhi người dùng đăng ký lại, chúng tôi sẽ nhận được email có email người dùng làm tên người dùng và mật khẩu tạm thời được tạo. Ngoài ra, nếu chúng tôi kiểm tra webhook của Stripe, chúng tôi sẽ thấy thông tin chi tiết về người dùng.\nNếu thành công ta sẽ thấy email sau:\nCái gì tiếp theo?\nTrong bài học tiếp theo, bạn sẽ học cách bảo vệ trang web khỏi những khách hàng trái phép.\n"
},
{
	"uri": "/vi/11-conclusion/",
	"title": "Kết luận",
	"tags": [],
	"description": "",
	"content": "Trong phòng lab này, bạn đã học cách:\nChủ đề thiết kế trong Figma cho dự án AWS Amplify của bạn Tạo dự án Amplify Chuyển convert component trong Figam sang code React Tích hợp Stripe với dự án AWS Amplify của bạn Bảo vệ trang web của bạn bằng xác thực Nếu bạn đang muốn tìm hiểu thêm về Amplify, hãy truy cập docs của chúng tôi và tham gia cộng đồng Discord của chúng tôi.\n"
},
{
	"uri": "/vi/10-authenticate-the-customers/",
	"title": "Xác thực khách hàng",
	"tags": [],
	"description": "",
	"content": "Mục tiêu Trong lab này, bạn sẽ học cách:\nTạo UI để xác thực\nBảo vệ khu vực khách hàng khỏi truy cập trái phép\nXác thực người dùng\nChúng tôi muốn bảo vệ trang đăng bài để những người dùng đã ký mới có thể truy cập trang đó; hãy cập nhật tệp post.js với các đoạn mã sau:\n//pages/post.js\r//other imports here\rimport {Authenticator,Flex,Heading,Text,useTheme,View,} from \u0026#34;@aws-amplify/ui-react\u0026#34;;\rimport { Footer, Logo, Stories } from \u0026#34;../ui-components\u0026#34;;\rfunction Post() {\rconst authComponents = {\rHeader() {\rconst { tokens } = useTheme();\rreturn (\r\u0026lt;Flex\rjustifyContent={\u0026#34;center\u0026#34;}\rdirection=\u0026#34;column\u0026#34;\rpaddingTop={tokens.space.xxxl}\rpaddingBottom={tokens.space.xxl}\r\u0026gt;\r\u0026lt;Logo /\u0026gt;\r\u0026lt;/Flex\u0026gt;\r);\r},\r};\rreturn (\r\u0026lt;Authenticator components={authComponents} hideSignUp={true}\u0026gt;\r{({ signOut, user }) =\u0026gt; (\r\u0026lt;Layout\rhandleClick={() =\u0026gt; signOut()}\rauthText=\u0026#34;Sign Out\u0026#34;\rusername={user.attributes.email.split(\u0026#34;@\u0026#34;)[0]}\r\u0026gt;\r// other components here\r\u0026lt;/Layout\u0026gt;\r)}\r\u0026lt;/Authenticator\u0026gt;\r);\r}\rexport default Post; Trong các đoạn trên, chúng tôi:\nĐã nhập Authenticator, useTheme và Flex từ \u0026ldquo;@aws-amplify/ui-react\u0026rdquo; và nhập Biểu trưng từ \u0026ldquo;ui-components\u0026rdquo;.\nĐã tạo đối tượng authComponent, tạo hàm Header() bên trong nó, hủy cấu trúc mã thông báo từ hàm useTheme() và sử dụng Flex để hiển thị thành phần Logo.\nBọc Bố cục bằng Authenticator và chuyển authComponent cho các thành phần chống đỡ của nó. Đã chuyển hàm signOut cho sự kiện Layout handleClick và cập nhật giá trị tên người dùng với tham số người dùng.\nNhấp chọn Sign Up, khi trang bật lên như thế này\nCopy Your temporary password từ email và thay đổi password\nKhi bạn vào lại trang web, bạn sẽ phải xác minh lại thông tin của mình\nKiểm tra email của bạn\nVà bạn đã thực hiện xong phần xác thực khách hàng.\n"
},
{
	"uri": "/vi/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/vi/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]